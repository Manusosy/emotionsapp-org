import { authService, userService, dataService, apiService, patientService, moodMentorService, appointmentService } from '@/services'
import React, { useState, useEffect, useContext } from "react";
import DashboardLayout from "@/features/dashboard/components/DashboardLayout";
import { supabase } from "@/lib/supabase";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import {
  Calendar,
  Clock,
  Video,
  MessageSquare,
  Check,
  X,
  Filter,
  Search,
  MoreVertical,
  FileText,
  Edit,
  Phone,
} from "lucide-react";
import { useNavigate, useLocation } from "react-router-dom";
import { toast } from "sonner";
import {
  Select,
  SelectContent,
  SelectGroup,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { Badge } from "@/components/ui/badge";
import { Input } from "@/components/ui/input";
import { format, addDays, startOfMonth, endOfMonth, isAfter, isBefore, isToday, startOfDay } from "date-fns";
import { AuthContext } from "@/contexts/authContext";
import { jsPDF } from 'jspdf';
import 'jspdf-autotable';
import { ChatButton } from "@/components/messaging/ChatButton";
import { useAuth } from "@/contexts/authContext";
import { cn } from '@/lib/utils';
import { Appointment } from '@/types';
import { AppointmentDetailDialog } from '../components/AppointmentDetailDialog';
import { Spinner } from '@/components/ui/spinner';
import { CalendarIcon } from 'lucide-react';
import { Separator } from '@/components/ui/separator';
import { User } from 'lucide-react';

interface AppointmentDisplay {
  id: string;
  patient_id: string;
  date: string;
  time: string;
  type: string;
  status: string;
  patient: {
    name: string;
    avatar: string;
    email?: string;
    phone?: string;
  };
  notes?: string;
}

export default function AppointmentsPage() {
  const navigate = useNavigate();
  const location = useLocation();
  const { user } = useAuth();
  const [appointments, setAppointments] = useState<Appointment[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [statusFilter, setStatusFilter] = useState("all");
  const [dateFilter, setDateFilter] = useState("all");
  const [searchQuery, setSearchQuery] = useState("");
  const [selectedDate, setSelectedDate] = useState<Date>(new Date());
  const [selectedAppointment, setSelectedAppointment] = useState<Appointment | null>(null);
  const [isDialogOpen, setIsDialogOpen] = useState(false);
  
  // Parse URL parameters for date filtering
  useEffect(() => {
    const queryParams = new URLSearchParams(location.search);
    const dateParam = queryParams.get('date');
    
    if (dateParam) {
      // Set custom date filter
      setDateFilter('custom');
    }
  }, [location.search]);
  
  useEffect(() => {
    fetchAppointments();
  }, [user, statusFilter, dateFilter, location.search]);

  const fetchAppointments = async () => {
    try {
      setIsLoading(true);
      
      // Get current date in YYYY-MM-DD format
      const today = new Date();
      const todayFormatted = format(today, 'yyyy-MM-dd');
      
      // Fetch appointments from the database
      const { data, error } = await supabase
        .from('mentor_appointments_view')
        .select('*')
        .eq('mentor_id', user?.id)
        .order('date', { ascending: false });
      
      if (error) {
        console.error('Error fetching appointments:', error);
        toast.error("Failed to fetch appointments: " + error.message);
        setIsLoading(false);
        return;
      }
      
      // If no data but no error, it means there are no appointments yet
      if (!data || data.length === 0) {
        console.log("No appointments found for this mentor");
        setAppointments([]);
        setIsLoading(false);
        return;
      }
      
      const normalizeStatus = (status: string) => {
        // Map "scheduled" and "pending" to "upcoming" for consistency
        if (status === "scheduled" || status === "pending") {
          return "upcoming";
        }
        return status;
      };
      
      const transformedData = data.map(appointment => ({
        id: appointment.id,
        patient_id: appointment.patient_id,
        date: appointment.date,
        time: `${appointment.start_time} - ${appointment.end_time}`,
        type: appointment.meeting_type,
        status: normalizeStatus(appointment.status || "upcoming"),
        notes: appointment.notes,
        patient: {
          name: appointment.patient_name || "Unknown Patient",
          avatar: appointment.patient_avatar_url || "",
          email: appointment.patient_email || "",
          phone: appointment.patient_phone || ""
        }
      }));
      
      console.log("Transformed appointment data:", transformedData);
      setAppointments(transformedData);
    } catch (error: any) {
      console.error('Error fetching appointments:', error);
      toast.error("Failed to fetch appointments: " + (error.message || "Unknown error"));
    } finally {
      setIsLoading(false);
    }
  };

  const handleStatusChange = async (appointmentId: string, newStatus: string) => {
    try {
      const { error } = await supabase
        .from("appointments")
        .update({ status: newStatus })
        .eq("id", appointmentId);

      if (error) throw error;
      toast.success(`Appointment ${newStatus} successfully`);
      fetchAppointments();
    } catch (error: any) {
      toast.error(error.message || "Failed to update appointment status");
    }
  };

  const handleJoinSession = async (appointment: Appointment) => {
    try {
      console.log('Joining session for appointment:', appointment.id);
      
      if (!appointment.id) {
        console.error('Cannot join session: Appointment ID is missing');
        toast.error('Cannot join session', {
          description: 'Appointment information is incomplete'
        });
        return;
      }
      
      // Set the selected appointment and open the dialog
      setSelectedAppointment(appointment);
      setIsDialogOpen(true);
    } catch (error: any) {
      console.error('Error joining session:', error);
      toast.error('Failed to join session', {
        description: error.message || 'An unexpected error occurred'
      });
    }
  };

  const handleExportAppointment = (appointment: AppointmentDisplay) => {
    try {
      // Create a new jsPDF instance
      const doc = new jsPDF();
      
      // Add title
      doc.setFontSize(20);
      doc.text('Appointment Details', 15, 20);
      
      // Add appointment information
      doc.setFontSize(12);
      doc.text(`Patient: ${appointment.patient.name}`, 15, 40);
      doc.text(`Date: ${appointment.date}`, 15, 50);
      doc.text(`Time: ${appointment.time}`, 15, 60);
      doc.text(`Type: ${appointment.type}`, 15, 70);
      doc.text(`Status: ${appointment.status}`, 15, 80);
      
      // Add notes if available
      if (appointment.notes) {
        doc.text('Notes:', 15, 100);
        doc.setFontSize(10);
        
        // Split notes into multiple lines if needed
        const splitNotes = doc.splitTextToSize(appointment.notes, 180);
        doc.text(splitNotes, 15, 110);
      }
      
      // Save the PDF
      doc.save(`appointment-${appointment.id}.pdf`);
      
      toast.success('Appointment details exported successfully');
    } catch (error: any) {
      console.error('Error exporting appointment:', error);
      toast.error('Failed to export appointment details');
    }
  };

  const getStatusBadge = (status: string) => {
    const statusConfig = {
      upcoming: { label: "Upcoming", color: "bg-blue-100 text-blue-800 border-blue-200" },
      scheduled: { label: "In Progress", color: "bg-amber-100 text-amber-800 border-amber-200" },
      completed: { label: "Completed", color: "bg-green-100 text-green-800 border-green-200" },
      cancelled: { label: "Cancelled", color: "bg-red-100 text-red-800 border-red-200" },
    }[status.toLowerCase()] || { label: status, color: "bg-gray-100 text-gray-800 border-gray-200" };

    return (
      <Badge variant="outline" className={statusConfig.color}>
        {statusConfig.label}
      </Badge>
    );
  };

  const getAppointmentTypeBadge = (type: string) => {
    const config = {
      video: { label: "Video", icon: <Video className="w-3 h-3 mr-1" /> },
      chat: { label: "Chat", icon: <MessageSquare className="w-3 h-3 mr-1" /> },
      audio: { label: "Audio", icon: <Phone className="w-3 h-3 mr-1" /> },
    }[type.toLowerCase()];

    return (
      <Badge variant="secondary" className="bg-gray-100 text-gray-800 border-gray-200">
        {config?.icon}
        {config?.label || type}
      </Badge>
    );
  };

  const filteredAppointments = appointments.filter(appointment => {
    if (searchQuery === "") return true;
    
    const searchLower = searchQuery.toLowerCase();
    return (
      appointment.patient.name.toLowerCase().includes(searchLower) ||
      appointment.patient.email?.toLowerCase().includes(searchLower) ||
      appointment.patient.phone?.toLowerCase().includes(searchLower) ||
      appointment.id.toLowerCase().includes(searchLower)
    );
  });

  // Update the isAppointmentActive function to always allow mentors to start sessions
  const isAppointmentActive = () => {
    // Mentors can start sessions at any time
    return true;
  };

  // Filter appointments based on selected date filter
  const filteredAppointmentsByDate = filteredAppointments.filter(appointment => {
    const appointmentDate = new Date(appointment.date);
    const now = new Date();
    
    if (dateFilter === 'today') {
      return isToday(appointmentDate);
    } else if (dateFilter === 'week') {
      const weekStart = startOfDay(now);
      const weekEnd = addDays(weekStart, 7);
      return isAfter(appointmentDate, weekStart) && isBefore(appointmentDate, weekEnd);
    } else if (dateFilter === 'month') {
      const monthStart = startOfMonth(now);
      const monthEnd = endOfMonth(now);
      return isAfter(appointmentDate, monthStart) && isBefore(appointmentDate, monthEnd);
    } else if (dateFilter === 'custom') {
      // If a date is selected in the calendar
      return format(appointmentDate, 'yyyy-MM-dd') === format(selectedDate, 'yyyy-MM-dd');
    }
    
    return true; // 'all' filter
  });
  
  // Filter by status
  const filteredAppointmentsByTab = filteredAppointmentsByDate.filter(appointment => {
    if (statusFilter === 'all') return true;
    return appointment.status.toLowerCase() === statusFilter.toLowerCase();
  });

  // Get dates with appointments for the calendar
  const datesWithAppointments = filteredAppointments.map(app => 
    format(new Date(app.date), 'yyyy-MM-dd')
  );

  return (
    <DashboardLayout>
      <div className="space-y-6">
        <div className="flex justify-between items-center">
          <div>
            <h1 className="text-2xl font-bold tracking-tight">Appointments</h1>
            <p className="text-muted-foreground">Manage your appointments and sessions</p>
          </div>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
          <div className="md:col-span-3">
            <Card>
              <div className="p-4 space-y-4">
                <div className="flex items-center justify-between gap-4">
                  <div className="flex-1">
                    <Input
                      placeholder="Search by patient name, email, or phone..."
                      value={searchQuery}
                      onChange={(e) => setSearchQuery(e.target.value)}
                      className="w-full"
                    />
                  </div>
                  <div className="flex items-center gap-2">
                    <Select value={statusFilter} onValueChange={setStatusFilter}>
                      <SelectTrigger className="w-[140px]">
                        <SelectValue placeholder="Status" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectGroup>
                          <SelectItem value="all">All Status</SelectItem>
                          <SelectItem value="upcoming">Upcoming</SelectItem>
                          <SelectItem value="scheduled">In Progress</SelectItem>
                          <SelectItem value="completed">Completed</SelectItem>
                          <SelectItem value="cancelled">Cancelled</SelectItem>
                        </SelectGroup>
                      </SelectContent>
                    </Select>

                    <Select value={dateFilter} onValueChange={setDateFilter}>
                      <SelectTrigger className="w-[140px]">
                        <SelectValue placeholder="Date Range" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectGroup>
                          <SelectItem value="all">All Time</SelectItem>
                          <SelectItem value="today">Today</SelectItem>
                          <SelectItem value="week">This Week</SelectItem>
                          <SelectItem value="month">This Month</SelectItem>
                          {new URLSearchParams(location.search).get('date') && (
                            <SelectItem value="custom">
                              {new Date(new URLSearchParams(location.search).get('date')!).toLocaleDateString()}
                            </SelectItem>
                          )}
                        </SelectGroup>
                      </SelectContent>
                    </Select>
                  </div>
                </div>

                <div className="rounded-md border">
                  <Table>
                    <TableHeader>
                      <TableRow>
                        <TableHead>Patient</TableHead>
                        <TableHead>Date & Time</TableHead>
                        <TableHead>Type</TableHead>
                        <TableHead>Status</TableHead>
                        <TableHead className="text-right">Actions</TableHead>
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      {isLoading ? (
                        <TableRow>
                          <TableCell colSpan={5} className="text-center py-8">
                            Loading appointments...
                          </TableCell>
                        </TableRow>
                      ) : filteredAppointmentsByTab.length === 0 ? (
                        <TableRow>
                          <TableCell colSpan={5} className="text-center py-8 text-gray-500">
                            No appointments found
                          </TableCell>
                        </TableRow>
                      ) : (
                        filteredAppointmentsByTab.map((appointment) => (
                          <TableRow key={appointment.id}>
                            <TableCell>
                              <div className="flex items-center space-x-3">
                                <div className="w-10 h-10 rounded-full bg-gray-200 flex items-center justify-center">
                                  {appointment.patient.avatar ? (
                                    <img
                                      src={appointment.patient.avatar}
                                      alt={appointment.patient.name}
                                      className="w-10 h-10 rounded-full object-cover"
                                    />
                                  ) : (
                                    <span className="text-lg font-bold text-gray-600">
                                      {appointment.patient.name.charAt(0)}
                                    </span>
                                  )}
                                </div>
                                <div>
                                  <div className="font-medium">{appointment.patient.name}</div>
                                  {appointment.patient.email && (
                                    <div className="text-sm text-gray-500">{appointment.patient.email}</div>
                                  )}
                                </div>
                              </div>
                            </TableCell>
                            <TableCell>
                              <div className="flex flex-col">
                                <div className="flex items-center">
                                  <Calendar className="w-4 h-4 mr-1 text-gray-500" />
                                  <span>{appointment.date}</span>
                                </div>
                                <div className="flex items-center text-gray-500">
                                  <Clock className="w-4 h-4 mr-1" />
                                  <span>{appointment.time}</span>
                                </div>
                              </div>
                            </TableCell>
                            <TableCell>{getAppointmentTypeBadge(appointment.type)}</TableCell>
                            <TableCell>{getStatusBadge(appointment.status)}</TableCell>
                            <TableCell className="text-right">
                              <div className="flex items-center justify-end space-x-2">
                                {/* Upcoming/Scheduled/Pending Appointments */}
                                {(appointment.status.toLowerCase() === "upcoming" || 
                                  appointment.status.toLowerCase() === "scheduled" || 
                                  appointment.status.toLowerCase() === "pending") && (
                                  <>
                                    {isAppointmentActive() ? (
                                      <Button
                                        size="sm"
                                        onClick={() => handleJoinSession(appointment)}
                                        className={
                                          appointment.status.toLowerCase() === "scheduled"
                                            ? "bg-red-600 hover:bg-red-700 text-white" 
                                            : "bg-green-600 hover:bg-green-700 text-white"
                                        }
                                      >
                                        {appointment.status.toLowerCase() === "scheduled" ? (
                                          <><X className="w-3 h-3 mr-1" /> End Session</>
                                        ) : (
                                          <>
                                            {appointment.type.toLowerCase() === 'video' && (
                                              <><Video className="w-3 h-3 mr-1" /> Start Session</>
                                            )}
                                            {appointment.type.toLowerCase() === 'chat' && (
                                              <><MessageSquare className="w-3 h-3 mr-1" /> Start Session</>
                                            )}
                                            {appointment.type.toLowerCase() === 'audio' && (
                                              <><Phone className="w-3 h-3 mr-1" /> Start Session</>
                                            )}
                                            {!['video', 'chat', 'audio'].includes(appointment.type.toLowerCase()) && (
                                              <><Clock className="w-3 h-3 mr-1" /> Start Session</>
                                            )}
                                          </>
                                        )}
                                      </Button>
                                    ) : (
                                      <Button
                                        size="sm"
                                        onClick={() => handleJoinSession(appointment)}
                                        variant="outline"
                                        className="border-blue-200 text-blue-600 hover:bg-blue-50"
                                      >
                                        <FileText className="w-3 h-3 mr-1" /> View Details
                                      </Button>
                                    )}
                                    <DropdownMenu>
                                      <DropdownMenuTrigger asChild>
                                        <Button variant="ghost" size="icon">
                                          <MoreVertical className="w-4 h-4" />
                                        </Button>
                                      </DropdownMenuTrigger>
                                      <DropdownMenuContent align="end">
                                        <DropdownMenuItem onClick={() => handleJoinSession(appointment)}>
                                          {appointment.status.toLowerCase() === "scheduled" ? (
                                            <><X className="w-4 h-4 mr-2" /> End Session</>
                                          ) : (
                                            <>
                                              {appointment.type.toLowerCase() === 'video' && (
                                                <><Video className="w-4 h-4 mr-2" /> Start Session</>
                                              )}
                                              {appointment.type.toLowerCase() === 'chat' && (
                                                <><MessageSquare className="w-4 h-4 mr-2" /> Start Session</>
                                              )}
                                              {appointment.type.toLowerCase() === 'audio' && (
                                                <><Phone className="w-4 h-4 mr-2" /> Start Session</>
                                              )}
                                              {!['video', 'chat', 'audio'].includes(appointment.type.toLowerCase()) && (
                                                <><FileText className="w-4 h-4 mr-2" /> Start Session</>
                                              )}
                                            </>
                                          )}
                                        </DropdownMenuItem>
                                        <DropdownMenuItem onClick={() => handleStatusChange(appointment.id, "completed")}>
                                          <Check className="w-4 h-4 mr-2" /> Mark as Completed
                                        </DropdownMenuItem>
                                        <DropdownMenuItem onClick={() => handleStatusChange(appointment.id, "cancelled")}>
                                          <X className="w-4 h-4 mr-2" /> Cancel Appointment
                                        </DropdownMenuItem>
                                        <DropdownMenuItem onClick={() => handleExportAppointment(appointment)}>
                                          <FileText className="w-4 h-4 mr-2" /> Export Details
                                        </DropdownMenuItem>
                                      </DropdownMenuContent>
                                    </DropdownMenu>
                                  </>
                                )}
                                
                                {/* Completed Appointments */}
                                {appointment.status.toLowerCase() === "completed" && (
                                  <>
                                    <Button
                                      size="sm"
                                      variant="outline"
                                      onClick={() => handleJoinSession(appointment)}
                                    >
                                      <FileText className="w-3 h-3 mr-1" /> View Details
                                    </Button>
                                    <DropdownMenu>
                                      <DropdownMenuTrigger asChild>
                                        <Button variant="ghost" size="icon">
                                          <MoreVertical className="w-4 h-4" />
                                        </Button>
                                      </DropdownMenuTrigger>
                                      <DropdownMenuContent align="end">
                                        <DropdownMenuItem onClick={() => navigate(`/mood-mentor-dashboard/notes/${appointment.id}`)}>
                                          <Edit className="w-4 h-4 mr-2" /> Edit Notes
                                        </DropdownMenuItem>
                                        <DropdownMenuItem onClick={() => handleExportAppointment(appointment)}>
                                          <FileText className="w-4 h-4 mr-2" /> Export Details
                                        </DropdownMenuItem>
                                      </DropdownMenuContent>
                                    </DropdownMenu>
                                  </>
                                )}
                                
                                {/* Cancelled Appointments */}
                                {appointment.status.toLowerCase() === "cancelled" && (
                                  <>
                                    <Button
                                      size="sm"
                                      variant="outline"
                                      onClick={() => handleJoinSession(appointment)}
                                    >
                                      <FileText className="w-3 h-3 mr-1" /> View Details
                                    </Button>
                                    <Button
                                      size="sm"
                                      variant="outline"
                                      onClick={() => handleExportAppointment(appointment)}
                                    >
                                      <FileText className="w-3 h-3 mr-1" /> Export
                                    </Button>
                                  </>
                                )}
                                
                                {/* Chat Button for all chat appointments */}
                                {appointment.type.toLowerCase() === 'chat' && (
                                  <ChatButton
                                    userId={user?.id || ''}
                                    targetUserId={appointment.patient_id}
                                    userRole="mood_mentor"
                                    variant="outline"
                                    size="sm"
                                  />
                                )}
                              </div>
                            </TableCell>
                          </TableRow>
                        ))
                      )}
                    </TableBody>
                  </Table>
                </div>
              </div>
            </Card>
          </div>

          <div className="md:col-span-1">
            <Card>
              <CardHeader>
                <CardTitle>Calendar</CardTitle>
                <CardDescription>Select a date to view appointments</CardDescription>
              </CardHeader>
              <CardContent>
                <Calendar
                  mode="single"
                  selected={selectedDate}
                  onSelect={(date) => {
                    if (date) {
                      setSelectedDate(date);
                      setDateFilter('custom');
                    }
                  }}
                  className="rounded-md border"
                  modifiers={{
                    hasAppointment: (date) => 
                      datesWithAppointments.includes(format(date, 'yyyy-MM-dd')),
                  }}
                  modifiersStyles={{
                    hasAppointment: { 
                      fontWeight: 'bold',
                      backgroundColor: 'rgba(59, 130, 246, 0.1)',
                      borderColor: 'rgba(59, 130, 246, 0.5)',
                    }
                  }}
                />
              </CardContent>
            </Card>
          </div>
        </div>

        {selectedAppointment && (
          <AppointmentDetailDialog
            appointment={selectedAppointment}
            open={isDialogOpen}
            onOpenChange={setIsDialogOpen}
            onJoinSession={() => handleJoinSession(selectedAppointment)}
            isMentor={true}
          />
        )}
      </div>
    </DashboardLayout>
  );
} 